/*
 * Copyright 2018 Manuel Wrage
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.ivianuu.r2'

group='com.github.ivianuu'

android {
    compileSdkVersion Versions.compileSdk

    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        consumerProguardFiles 'proguard-rules.txt'

        /*javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['dagger.android.experimentalUseStringKeys': 'true']
            }
        }*/
    }
    androidExtensions {
        experimental = true
    }
    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    api Deps.androidxAppCompat
    api Deps.androidxCardView
    api Deps.androidxCoreKtx
    api Deps.androidxPalette

    api Deps.androidKtx

    api Deps.coroutinesAndroid
    api Deps.coroutinesCore
    api Deps.coroutinesRxJava

    api Deps.archLifecycleExtensions
    api Deps.archWorkRuntime

    api Deps.compass

    api Deps.constraintLayout

    api Deps.dagger
    api Deps.daggerAndroid
    api Deps.daggerAndroidSupport

    api Deps.epoxy
    api Deps.epoxyPrefs

    kapt project(':essentials-compiler')

    implementation(Deps.fabric) {
        transitive = true
    }

    api Deps.glide

    api Deps.kotlinReflect
    api Deps.kotlinStdLib

    api project(":ktuples")

    api Deps.legacyAnnotations

    api Deps.liveEvent

    api Deps.materialComponents
    api Deps.materialComponentsKtx

    api Deps.materialDialogsCore
    api Deps.materialDialogsCommons

    api Deps.rxAndroid
    api Deps.rxAndroid2
    api Deps.rxJava
    api Deps.rxJavaKtx
    api Deps.rxKotlin
    api Deps.rxLifecycle
    api Deps.rxPreferences
    api Deps.rxSystemSettings

    api Deps.superUser

    api Deps.stickyHeaders

    api Deps.timber
    api Deps.timberKtx

    api Deps.toasty

    api Deps.traveler
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}